{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPwatYKX6xyGQGQKBqa/0Ul"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["###특성공학과 규제\n","\n"],"metadata":{"id":"BdDiK_SgMP2J"}},{"cell_type":"markdown","source":["### 다중회귀(Mutiple Regression = Multinomial Regression)"],"metadata":{"id":"ZE61WQHzNMZ2"}},{"cell_type":"code","execution_count":65,"metadata":{"id":"AMGl5USLvxK7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1721108362858,"user_tz":-540,"elapsed":275,"user":{"displayName":"‍김재환[재학 / 경영·금융학과]","userId":"00093002418116295485"}},"outputId":"432bda13-d893-4549-ec6b-70fe4968a2e8"},"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 8.4   2.11  1.41]\n"," [13.7   3.53  2.  ]\n"," [15.    3.82  2.43]\n"," [16.2   4.59  2.63]\n"," [17.4   4.59  2.94]\n"," [18.    5.22  3.32]\n"," [18.7   5.2   3.12]\n"," [19.    5.64  3.05]\n"," [19.6   5.14  3.04]\n"," [20.    5.08  2.77]\n"," [21.    5.69  3.56]\n"," [21.    5.92  3.31]\n"," [21.    5.69  3.67]\n"," [21.3   6.38  3.53]\n"," [22.    6.11  3.41]\n"," [22.    5.64  3.52]\n"," [22.    6.11  3.52]\n"," [22.    5.88  3.52]\n"," [22.    5.52  4.  ]\n"," [22.5   5.86  3.62]\n"," [22.5   6.79  3.62]\n"," [22.7   5.95  3.63]\n"," [23.    5.22  3.63]\n"," [23.5   6.28  3.72]\n"," [24.    7.29  3.72]\n"," [24.    6.38  3.82]\n"," [24.6   6.73  4.17]\n"," [25.    6.44  3.68]\n"," [25.6   6.56  4.24]\n"," [26.5   7.17  4.14]\n"," [27.3   8.32  5.14]\n"," [27.5   7.17  4.34]\n"," [27.5   7.05  4.34]\n"," [27.5   7.28  4.57]\n"," [28.    7.82  4.2 ]\n"," [28.7   7.59  4.64]\n"," [30.    7.62  4.77]\n"," [32.8  10.03  6.02]\n"," [34.5  10.26  6.39]\n"," [35.   11.49  7.8 ]\n"," [36.5  10.88  6.86]\n"," [36.   10.61  6.74]\n"," [37.   10.84  6.26]\n"," [37.   10.57  6.37]\n"," [39.   11.14  7.49]\n"," [39.   11.14  6.  ]\n"," [39.   12.43  7.35]\n"," [40.   11.93  7.11]\n"," [40.   11.73  7.22]\n"," [40.   12.38  7.46]\n"," [40.   11.14  6.63]\n"," [42.   12.8   6.87]\n"," [43.   11.93  7.28]\n"," [43.   12.51  7.42]\n"," [43.5  12.6   8.14]\n"," [44.   12.49  7.6 ]]\n"]}],"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","\n","df = pd.read_csv('https://bit.ly/perch_csv_data') ## 첫행을 자동으로 각열의 이름으로 처리 , 두번째 행부터 실제 데이터로 처리\n","perch_full = df.to_numpy() ## column_stack 함수로 만든 넘파이 배열과 동일한 객체가 만들어짐\n","print(perch_full)"]},{"cell_type":"markdown","source":["  - 넘파이 튜토리얼 : http://ml-ko.kr/homl2/tools_numpy.html\n","  - 판다스 튜토리얼 : http://ml-ko.kr/homl2/tools_pandas.html\n"],"metadata":{"id":"RvCF7mfHlV4A"}},{"cell_type":"markdown","source":["### 다항특성 만들기\n"],"metadata":{"id":"g9TyN7zHnnKJ"}},{"cell_type":"code","source":["from sklearn.preprocessing import PolynomialFeatures  ## PolynomialFeatures를 변환기(transformer) , LinearRegression, KNeighborsRegressor 들을 추정기(estimator)라고 지칭한다.\n","\n","# degree = 2  ## 제곱값을 만드는 변수\n","poly = PolynomialFeatures()\n","poly.fit([[2, 3]])\n","# 1(bias), 2, 3, 2**2, 2*3, 3**2\n","print(poly.transform([[2, 3]]))"],"metadata":{"id":"V64cM_hLvzBj","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1721108363189,"user_tz":-540,"elapsed":2,"user":{"displayName":"‍김재환[재학 / 경영·금융학과]","userId":"00093002418116295485"}},"outputId":"6de31ebf-99a1-4e1c-8498-cb14bf2748cb"},"execution_count":66,"outputs":[{"output_type":"stream","name":"stdout","text":["[[1. 2. 3. 4. 6. 9.]]\n"]}]},{"cell_type":"markdown","source":[" - 1이 존재하는 이유는 절편에 대한 가상의 특성을 1이라고 가정하고 추가한다.\n"," - y = a*x + b*1 이라는 다항 함수를 에 대한 수식은 다음과 같이 표시 할 수 있다. [a, b] * [x, 1]"],"metadata":{"id":"CY17nxyboo6L"}},{"cell_type":"markdown","source":["   - PolynomialFeatures를 변환기(transformer) , LinearRegression, KNeighborsRegressor 들을 추정기(estimator)라고 지칭한다.\n","   - estimator(추정기) 들은 fit -> predict -> score 와 같은 함수가 존재한다.\n","   - transformer(변환기) 들은 fit -> transform 와 같은 함수들이 존재한다.\n","   - 절차를 간소화 하기위해 fit_transform() 함수가 존재한다"],"metadata":{"id":"ehXkXXoYp9mD"}},{"cell_type":"markdown","source":["## LinearRegression"],"metadata":{"id":"_SSQQXr7rJNd"}},{"cell_type":"code","source":["import numpy as np\n","\n","perch_weight = np.array(\n","    [5.9, 32.0, 40.0, 51.5, 70.0, 100.0, 78.0, 80.0, 85.0, 85.0,\n","     110.0, 115.0, 125.0, 130.0, 120.0, 120.0, 130.0, 135.0, 110.0,\n","     130.0, 150.0, 145.0, 150.0, 170.0, 225.0, 145.0, 188.0, 180.0,\n","     197.0, 218.0, 300.0, 260.0, 265.0, 250.0, 250.0, 300.0, 320.0,\n","     514.0, 556.0, 840.0, 685.0, 700.0, 700.0, 690.0, 900.0, 650.0,\n","     820.0, 850.0, 900.0, 1015.0, 820.0, 1100.0, 1000.0, 1100.0,\n","     1000.0, 1000.0]\n","     )"],"metadata":{"id":"zUgJyZ5Zrq45","executionInfo":{"status":"ok","timestamp":1721108363189,"user_tz":-540,"elapsed":1,"user":{"displayName":"‍김재환[재학 / 경영·금융학과]","userId":"00093002418116295485"}}},"execution_count":67,"outputs":[]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","\n","train_input, test_input, train_target, test_target = train_test_split(perch_full, perch_weight, random_state=42)"],"metadata":{"id":"0OygsC3xvzFf","executionInfo":{"status":"ok","timestamp":1721108363518,"user_tz":-540,"elapsed":330,"user":{"displayName":"‍김재환[재학 / 경영·금융학과]","userId":"00093002418116295485"}}},"execution_count":68,"outputs":[]},{"cell_type":"markdown","source":["   - perch_full 데이터는 길이 높이 두께의 3개의 데이터 세트이다.\n","   - perch_weight 데이터는 농어의 무게에 대한 데이터이다.\n","\n","   - 여기서는 perch_full 데이터(길이, 높이, 두께)의 데이터로 perch_weight 데이터를 예측해보는 알고리즘을 구현하려고 한다."],"metadata":{"id":"obFPe0EKwS9z"}},{"cell_type":"code","source":["poly = PolynomialFeatures(include_bias=False)\n","poly.fit(train_input)\n","train_poly = poly.transform(train_input)\n","\n","print(train_poly.shape)"],"metadata":{"id":"alM8sGtOvzDp","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1721108363518,"user_tz":-540,"elapsed":7,"user":{"displayName":"‍김재환[재학 / 경영·금융학과]","userId":"00093002418116295485"}},"outputId":"659f23a2-fadd-4b27-eef8-43673d675fc9"},"execution_count":69,"outputs":[{"output_type":"stream","name":"stdout","text":["(42, 9)\n"]}]},{"cell_type":"code","source":["print(poly.get_feature_names_out())\n","test_poly = poly.transform(test_input)"],"metadata":{"id":"Y7ookIpvv0Hn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1721108363518,"user_tz":-540,"elapsed":6,"user":{"displayName":"‍김재환[재학 / 경영·금융학과]","userId":"00093002418116295485"}},"outputId":"1671d102-98df-45aa-d524-359bbf7c5581"},"execution_count":70,"outputs":[{"output_type":"stream","name":"stdout","text":["['x0' 'x1' 'x2' 'x0^2' 'x0 x1' 'x0 x2' 'x1^2' 'x1 x2' 'x2^2']\n"]}]},{"cell_type":"markdown","source":["  - prech_full 데이터를 PolynomialFeatures 변환기를 이용하여 다항식으로 변환해준다.\n","  - 위의 데이터는 다항식으로 변환된 변수들의 수식이다.\n","  - 3개의 변수가 9개의 변수로 늘어난 것을 볼수 있다.\n","  - poynomial 변환기의 기본값(default 값)이 dgree = 2 이기 때문에 제곱값 까지만 나온것을 알 수 있다."],"metadata":{"id":"bkkR7HZcwyvo"}},{"cell_type":"markdown","source":["  - train_input 데이터는 fit 함수를 거쳐서 transform을 해야지 올바른 방식이다.\n","  - test_input 데이터는 fit 을 거칠 필요가 없고 transform 만 해도 된다."],"metadata":{"id":"kBGiRHzy2NXT"}},{"cell_type":"code","source":["from sklearn.linear_model import LinearRegression\n","\n","lr = LinearRegression()\n","lr.fit(train_poly, train_target)\n","\n","print(lr.score(train_poly, train_target))\n","print(lr.score(test_poly, test_target))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mKoIPFgDtMH3","executionInfo":{"status":"ok","timestamp":1721108363518,"user_tz":-540,"elapsed":5,"user":{"displayName":"‍김재환[재학 / 경영·금융학과]","userId":"00093002418116295485"}},"outputId":"b91c4631-0a5f-4164-fb8e-7af067ec54eb"},"execution_count":71,"outputs":[{"output_type":"stream","name":"stdout","text":["0.9903183436982125\n","0.9714559911594111\n"]}]},{"cell_type":"markdown","source":["## 더 많은 특성 만들기"],"metadata":{"id":"-ykjb8BjzQQ_"}},{"cell_type":"code","source":["poly = PolynomialFeatures(degree=5, include_bias=False)\n","poly.fit(train_input)\n","train_poly = poly.transform(train_input)\n","test_poly = poly.transform(test_input)\n","print(train_poly.shape)"],"metadata":{"id":"Zgc0lQOQv0Kn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1721108363518,"user_tz":-540,"elapsed":4,"user":{"displayName":"‍김재환[재학 / 경영·금융학과]","userId":"00093002418116295485"}},"outputId":"ec3daef5-e759-4c74-e289-b4565e7e05bc"},"execution_count":72,"outputs":[{"output_type":"stream","name":"stdout","text":["(42, 55)\n"]}]},{"cell_type":"code","source":["lr.fit(train_poly, train_target)\n","print(lr.score(train_poly, train_target))\n","print(lr.score(test_poly, test_target))"],"metadata":{"id":"ve11RQnbv0Nu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1721108363518,"user_tz":-540,"elapsed":4,"user":{"displayName":"‍김재환[재학 / 경영·금융학과]","userId":"00093002418116295485"}},"outputId":"325fb956-b71d-44da-d953-468b9e4e273f"},"execution_count":73,"outputs":[{"output_type":"stream","name":"stdout","text":["0.9999999999996433\n","-144.40579436844948\n"]}]},{"cell_type":"markdown","source":["  - PolynomialFeatures의 degree를 5로 늘려서 변수의 갯수를 55개까지 늘려보았다.\n","  - 훈련세트의 정확도는 올라갔지만, 반대로 테스트 세트의 정확도는 -144.405 가 나오는 것을 알 수 있다. 이는 과대적합문제가 발생하였다.\n","  - 이는 맞춰야 될 개수 42개 보다 투입된 변수가 55개로 더 많아서 발생한 문제이므로 변수의 개수가 일대일 대응보다 더 많아서 발생하였다.(과대적합)\n","\n","  - 규제(regularization) 혹은 정규화라고 불리는 작업이 필요하다.\n","  - 규제는 위와 같이 위와 같이 극도로 과대적합된 모델을 완화하는데 쓰이는 대표적인 기법이다.\n","  - 선형회귀라면 어떠한 모델의 가중치(기울기)값들을 줄여서 일반화된 모델을 만드는 과정을 의미한다. (릿지 회귀, 라소 회귀 )"],"metadata":{"id":"RnOn-5xTzwms"}},{"cell_type":"markdown","source":["## 규제 전에 표준화"],"metadata":{"id":"xkZSERkT4O99"}},{"cell_type":"code","source":["from sklearn.preprocessing import StandardScaler\n","\n","ss = StandardScaler()\n","ss.fit(train_poly)\n","\n","train_scaled = ss.transform(train_poly)\n","test_scaled = ss.transform(test_poly)"],"metadata":{"id":"QyT11ljDv0Qw","executionInfo":{"status":"ok","timestamp":1721108363518,"user_tz":-540,"elapsed":3,"user":{"displayName":"‍김재환[재학 / 경영·금융학과]","userId":"00093002418116295485"}}},"execution_count":74,"outputs":[]},{"cell_type":"markdown","source":["## 릿지 회귀"],"metadata":{"id":"MMwV_oa55U-W"}},{"cell_type":"code","source":["from sklearn.linear_model import Ridge\n","\n","ridge = Ridge()\n","ridge.fit(train_scaled, train_target)\n","print(ridge.score(train_scaled, train_target))\n","print(ridge.score(test_scaled, test_target))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"m8UP8gAz4UMx","executionInfo":{"status":"ok","timestamp":1721108363518,"user_tz":-540,"elapsed":3,"user":{"displayName":"‍김재환[재학 / 경영·금융학과]","userId":"00093002418116295485"}},"outputId":"6ad8111b-599c-4ab4-f4d5-279f58047fa7"},"execution_count":75,"outputs":[{"output_type":"stream","name":"stdout","text":["0.9896101671037343\n","0.9790693977615387\n"]}]},{"cell_type":"markdown","source":["  - Ridge() 회귀는 (가중치)^2을 규제하므로 L2 규제라고도 불린다\n","  - Ridge() 함수에는 매개변수 alpha 가 존재하며 default 값은 1이다. 이 알파 매개변수를 크게 하면 강도가 세진다, 알파 매개변수의 값을 작게하면 강도가 작아진다.\n","  - 제약 조건에서 (가중치)^2 의 가중치 변수는 모델에서 학습해서 찾아주는 값으로 모델 파라미터라고 한다.\n","  - alpha 값이 최적인지는 사전에 알수 없으며, alpha 값을 바꿔 가면서 최적의 값을 찾는 것이 기본이다.\n","  - alpha 값은 사용자가 정하는 값으로 대표적인 하이퍼 파라미터 값이다."],"metadata":{"id":"6FYH-trX6PcX"}},{"cell_type":"markdown","source":["## 적절한 규제 강도 찾기\n"],"metadata":{"id":"z9ivwtPs9G5W"}},{"cell_type":"code","source":["alpha_list = [0.001, 0.01, 0.1, 1, 10, 100]  ## 하이퍼 파라미터를 찾을 때 사용하는 일반적인 방법 (10의 배수를 활용한다. 상용 log scale)\n","train_score = []\n","test_score = []\n","for alpha in alpha_list:\n","    ridge = Ridge(alpha=alpha)\n","    ridge.fit(train_scaled, train_target)\n","    print(alpha, ridge.score(train_scaled, train_target))\n","    print(alpha, ridge.score(test_scaled, test_target))\n","    train_score.append(ridge.score(train_scaled, train_target))\n","    test_score.append(ridge.score(test_scaled, test_target))\n","\n","plt.plot(np.log10(alpha_list), train_score)\n","plt.plot(np.log10(alpha_list), test_score)\n","plt.xlabel('alpha')\n","plt.ylabel('R^2')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":657},"id":"tqxOLCJ64UNd","executionInfo":{"status":"ok","timestamp":1721108364560,"user_tz":-540,"elapsed":1044,"user":{"displayName":"‍김재환[재학 / 경영·금융학과]","userId":"00093002418116295485"}},"outputId":"c1556a5d-572c-4ccd-afc2-28f87720361b"},"execution_count":76,"outputs":[{"output_type":"stream","name":"stdout","text":["0.001 0.9930455252088248\n","0.001 0.9569388961567329\n","0.01 0.991780998125052\n","0.01 0.9800187936871725\n","0.1 0.9903815817570367\n","0.1 0.9827976465386928\n","1 0.9896101671037343\n","1 0.9790693977615387\n","10 0.988728468997471\n","10 0.9725329582461569\n","100 0.9841843235774494\n","100 0.9627042641050291\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["print(train_score)\n","print(test_score)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hpK-vU8q4UOD","executionInfo":{"status":"ok","timestamp":1721108364560,"user_tz":-540,"elapsed":7,"user":{"displayName":"‍김재환[재학 / 경영·금융학과]","userId":"00093002418116295485"}},"outputId":"e703dffe-d503-44d3-fc32-0a7f5fa7b770"},"execution_count":77,"outputs":[{"output_type":"stream","name":"stdout","text":["[0.9930455252088248, 0.991780998125052, 0.9903815817570367, 0.9896101671037343, 0.988728468997471, 0.9841843235774494]\n","[0.9569388961567329, 0.9800187936871725, 0.9827976465386928, 0.9790693977615387, 0.9725329582461569, 0.9627042641050291]\n"]}]},{"cell_type":"code","source":["ridge = Ridge(alpha=0.1)\n","ridge.fit(train_scaled, train_target)\n","print(ridge.score(train_scaled, train_target))\n","print(ridge.score(test_scaled, test_target))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mCJ5DSJ44UOo","executionInfo":{"status":"ok","timestamp":1721108364560,"user_tz":-540,"elapsed":6,"user":{"displayName":"‍김재환[재학 / 경영·금융학과]","userId":"00093002418116295485"}},"outputId":"2d771e09-db5d-45b2-d69e-514557eeb75a"},"execution_count":78,"outputs":[{"output_type":"stream","name":"stdout","text":["0.9903815817570367\n","0.9827976465386928\n"]}]},{"cell_type":"markdown","source":["## 라쏘 회귀"],"metadata":{"id":"kDcWYuLl_Y1G"}},{"cell_type":"markdown","source":["  - 릿지회귀는 가중치의 제곱값을 벌칙으로 주는 반면에 라쏘회귀는 가중치의 절대값을 벌칙으로 주어진다.\n","  - 라쏘회귀는 L1 규제를 적용한다고 말한다. 즉 L1 규제가 선형회귀에 주어진 것이 라쏘회귀이다."],"metadata":{"id":"kI_KXtznBtNT"}},{"cell_type":"code","source":["from sklearn.linear_model import Lasso\n","\n","lasso = Lasso()\n","lasso.fit(train_scaled, train_target)\n","print(lasso.score(train_scaled, train_target))\n","print(lasso.score(test_scaled, test_target))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ctias_FL4UQb","executionInfo":{"status":"ok","timestamp":1721108364560,"user_tz":-540,"elapsed":5,"user":{"displayName":"‍김재환[재학 / 경영·금융학과]","userId":"00093002418116295485"}},"outputId":"021da00a-2e9f-4ede-f0b5-4693ee336f04"},"execution_count":79,"outputs":[{"output_type":"stream","name":"stdout","text":["0.989789897208096\n","0.9800593698421883\n"]}]},{"cell_type":"code","source":["# # 라쏘회귀 시각화\n","# import matplotlib.pyplot as plt\n","\n","# # 학습 데이터와 테스트 데이터에 대한 예측 값 계산\n","# train_predictions = lasso.predict(train_scaled)\n","# test_predictions = lasso.predict(test_scaled)\n","\n","# # 학습 데이터에 대한 실제 값과 예측 값을 비교하는 그래프\n","# plt.figure(figsize=(14, 6))\n","\n","# plt.subplot(1, 2, 1)\n","# plt.scatter(train_target, train_predictions, alpha=0.5)\n","# plt.plot([train_target.min(), train_target.max()], [train_target.min(), train_target.max()], 'r--')\n","# plt.xlabel('Actual')\n","# plt.ylabel('Predicted')\n","# plt.title('Train Data: Actual vs Predicted')\n","\n","# # 테스트 데이터에 대한 실제 값과 예측 값을 비교하는 그래프\n","# plt.subplot(1, 2, 2)\n","# plt.scatter(test_target, test_predictions, alpha=0.5)\n","# plt.plot([test_target.min(), test_target.max()], [test_target.min(), test_target.max()], 'r--')\n","# plt.xlabel('Actual')\n","# plt.ylabel('Predicted')\n","# plt.title('Test Data: Actual vs Predicted')\n","\n","# plt.tight_layout()\n","# plt.show()\n"],"metadata":{"id":"OzGgeyDN4UTs","executionInfo":{"status":"ok","timestamp":1721108364560,"user_tz":-540,"elapsed":5,"user":{"displayName":"‍김재환[재학 / 경영·금융학과]","userId":"00093002418116295485"}}},"execution_count":80,"outputs":[]},{"cell_type":"code","source":["lasso = Lasso(alpha=10)\n","lasso.fit(train_scaled, train_target)\n","\n","print(lasso.score(train_scaled, train_target))\n","print(lasso.score(test_scaled, test_target))\n","\n","print(np.sum(lasso.coef_ == 0))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"U6PQvKtG4UWr","executionInfo":{"status":"ok","timestamp":1721108364560,"user_tz":-540,"elapsed":4,"user":{"displayName":"‍김재환[재학 / 경영·금융학과]","userId":"00093002418116295485"}},"outputId":"c0d02fd6-b46a-4ad3-837d-c286edc6b338"},"execution_count":81,"outputs":[{"output_type":"stream","name":"stdout","text":["0.9888067471131867\n","0.9824470598706695\n","40\n"]}]},{"cell_type":"code","source":["# alpha 값의 범위 설정\n","alpha_values = np.logspace(-2, 2, 50)\n","train_scores = []\n","test_scores = []\n","\n","# 다양한 alpha 값에 대한 모델 학습 및 평가\n","for alpha in alpha_values:\n","    lasso = Lasso(alpha=alpha)\n","    lasso.fit(train_scaled, train_target)\n","    train_scores.append(lasso.score(train_scaled, train_target))\n","    test_scores.append(lasso.score(test_scaled, test_target))\n","\n","# 그래프 그리기\n","plt.figure(figsize=(10, 6))\n","plt.plot(alpha_values, train_scores, label='Train R^2', marker='o')\n","plt.plot(alpha_values, test_scores, label='Test R^2', marker='o')\n","plt.xscale('log')\n","plt.xlabel('alpha')\n","plt.ylabel('R^2')\n","plt.title('R^2 Score vs Alpha Value')\n","plt.legend()\n","plt.grid(True)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"99VdBwBs4UaU","executionInfo":{"status":"ok","timestamp":1721108365696,"user_tz":-540,"elapsed":1140,"user":{"displayName":"‍김재환[재학 / 경영·금융학과]","userId":"00093002418116295485"}},"outputId":"0197e405-810c-470e-85c6-4a3a2bb242c0"},"execution_count":82,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.025e+04, tolerance: 5.183e+02\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.947e+04, tolerance: 5.183e+02\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.879e+04, tolerance: 5.183e+02\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.767e+04, tolerance: 5.183e+02\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.598e+04, tolerance: 5.183e+02\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.446e+04, tolerance: 5.183e+02\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.256e+04, tolerance: 5.183e+02\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.074e+04, tolerance: 5.183e+02\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.333e+03, tolerance: 5.183e+02\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.963e+03, tolerance: 5.183e+02\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.417e+03, tolerance: 5.183e+02\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.305e+03, tolerance: 5.183e+02\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.715e+02, tolerance: 5.183e+02\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.312e+02, tolerance: 5.183e+02\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.201e+02, tolerance: 5.183e+02\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.001e+02, tolerance: 5.183e+02\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.237e+02, tolerance: 5.183e+02\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.319e+02, tolerance: 5.183e+02\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.913e+02, tolerance: 5.183e+02\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.676e+02, tolerance: 5.183e+02\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.517e+02, tolerance: 5.183e+02\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.265e+03, tolerance: 5.183e+02\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.376e+03, tolerance: 5.183e+02\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.081e+03, tolerance: 5.183e+02\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.617e+02, tolerance: 5.183e+02\n","  model = cd_fast.enet_coordinate_descent(\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"1yIqT7MC4Uds","executionInfo":{"status":"ok","timestamp":1721108365697,"user_tz":-540,"elapsed":4,"user":{"displayName":"‍김재환[재학 / 경영·금융학과]","userId":"00093002418116295485"}}},"execution_count":82,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"Iry76i5yv0T0","executionInfo":{"status":"ok","timestamp":1721108365697,"user_tz":-540,"elapsed":4,"user":{"displayName":"‍김재환[재학 / 경영·금융학과]","userId":"00093002418116295485"}}},"execution_count":82,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"gj0D6-mcv0Wv","executionInfo":{"status":"ok","timestamp":1721108365697,"user_tz":-540,"elapsed":3,"user":{"displayName":"‍김재환[재학 / 경영·금융학과]","userId":"00093002418116295485"}}},"execution_count":82,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"UFSBkZduv0aH","executionInfo":{"status":"ok","timestamp":1721108365697,"user_tz":-540,"elapsed":3,"user":{"displayName":"‍김재환[재학 / 경영·금융학과]","userId":"00093002418116295485"}}},"execution_count":82,"outputs":[]}]}